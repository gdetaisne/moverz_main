#!/usr/bin/env node

/**
 * Tests de validation des sites g√©n√©r√©s
 * V√©rifie que les sites g√©n√©r√©s sont fonctionnels
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

function validateGeneratedSite(sitePath) {
  console.log(`üîç Validation du site: ${sitePath}`);
  
  const errors = [];
  
  // 1. V√©rifier que le build fonctionne
  console.log('üß™ Test de build...');
  try {
    execSync('npm run build', { 
      cwd: sitePath, 
      stdio: 'pipe',
      timeout: 60000 // 60 secondes
    });
    console.log('‚úÖ Build r√©ussi');
  } catch (error) {
    errors.push('‚ùå Build √©chou√©');
    console.log('‚ùå Erreur de build:', error.message);
  }
  
  // 2. V√©rifier les variables Handlebars r√©solues
  console.log('üîç V√©rification des variables Handlebars...');
  try {
    const files = execSync('find src -name "*.tsx" -o -name "*.ts"', { cwd: sitePath }).toString();
    const fileList = files.trim().split('\n');
    
    let handlebarsFound = false;
    fileList.forEach(file => {
      if (file) {
        const content = fs.readFileSync(path.join(sitePath, file), 'utf8');
        if (content.includes('{{{' || content.includes('{{'))) {
          handlebarsFound = true;
          errors.push(`‚ùå Variables Handlebars non r√©solues dans ${file}`);
        }
      }
    });
    
    if (!handlebarsFound) {
      console.log('‚úÖ Variables Handlebars r√©solues');
    }
  } catch (error) {
    errors.push('‚ùå Erreur lors de la v√©rification des variables');
  }
  
  // 3. V√©rifier les imports
  console.log('üîç V√©rification des imports...');
  try {
    const pageContent = fs.readFileSync(path.join(sitePath, 'src/app/page.tsx'), 'utf8');
    if (pageContent.includes('HeaderTemplate')) {
      errors.push('‚ùå Import HeaderTemplate encore pr√©sent');
    } else {
      console.log('‚úÖ Imports corrects');
    }
  } catch (error) {
    errors.push('‚ùå Erreur lors de la v√©rification des imports');
  }
  
  // R√©sum√©
  if (errors.length === 0) {
    console.log(`üéâ Site valid√© avec succ√®s !`);
    return true;
  } else {
    console.log(`‚ùå ${errors.length} erreurs trouv√©es:`);
    errors.forEach(error => console.log(`  ${error}`));
    return false;
  }
}

module.exports = { validateGeneratedSite };

// Ex√©cution directe
if (require.main === module) {
  const sitePath = process.argv[2];
  if (!sitePath) {
    console.log('Usage: node site-validation.js <path-to-site>');
    process.exit(1);
  }
  validateGeneratedSite(sitePath);
}
