#!/usr/bin/env node

/**
 * üìù Script automatis√© de t√©l√©chargement d'images de blog
 * Pour les 10 piliers de blog des 11 sites Moverz
 * 
 * Usage:
 *   UNSPLASH_ACCESS_KEY=votre_cl√© node scripts/download-blog-images.cjs
 * 
 * Ou cr√©er un fichier .env √† la racine:
 *   UNSPLASH_ACCESS_KEY=votre_cl√©
 */

const https = require('https');
const fs = require('fs');
const path = require('path');
const { createWriteStream } = require('fs');

// Configuration
const UNSPLASH_ACCESS_KEY = process.env.UNSPLASH_ACCESS_KEY;
const BASE_DIR = path.join(__dirname, '..');
const DRY_RUN = process.env.DRY_RUN === 'true'; // Pour tester sans t√©l√©charger

// Mapping des 10 piliers de blog avec leurs requ√™tes de recherche et alt-text SEO local
const BLOG_PILIERS = [
  { 
    filename: 'cover-etudiant.jpg', 
    query: 'student moving university campus young people',
    description: 'D√©m√©nagement √âtudiant - Ambiance jeune, campus',
    altTextTemplate: 'D√©m√©nagement √©tudiant {ville} - Guide complet √©tudiants, universit√©, budget serr√©'
  },
  { 
    filename: 'cover-entreprise.jpg', 
    query: 'office moving business relocation corporate',
    description: 'D√©m√©nagement Entreprise - Bureaux, d√©m√©nagement pro',
    altTextTemplate: 'D√©m√©nagement entreprise {ville} - Relocation professionnelle, bureaux, d√©m√©nageurs pros'
  },
  { 
    filename: 'cover-prix.jpg', 
    query: 'moving cost calculator money budget price',
    description: 'Prix & Tarifs - Calculatrice, devis, euros',
    altTextTemplate: 'Prix d√©m√©nagement {ville} 2025 - Tarifs, devis, calculatrice, budget'
  },
  { 
    filename: 'cover-devis.jpg', 
    query: 'moving quote estimate form clipboard',
    description: 'Devis D√©m√©nagement - Formulaire, estimation',
    altTextTemplate: 'Devis d√©m√©nagement {ville} gratuit - Estimation, comparateur, devis en ligne'
  },
  { 
    filename: 'cover-pas-cher.jpg', 
    query: 'cheap moving budget cardboard boxes',
    description: 'D√©m√©nagement √âconomique - Cartons, budget',
    altTextTemplate: 'D√©m√©nagement pas cher {ville} - √âconomique, budget, cartons, astuces'
  },
  { 
    filename: 'cover-urgent.jpg', 
    query: 'urgent moving fast relocation emergency',
    description: 'D√©m√©nagement Urgent - Rapidit√©, urgence',
    altTextTemplate: 'D√©m√©nagement urgent {ville} - Express, rapide, 24h, d√©m√©nageurs disponibles'
  },
  { 
    filename: 'cover-longue-distance.jpg', 
    query: 'long distance moving truck highway',
    description: 'Longue Distance - Camion, autoroute',
    altTextTemplate: 'D√©m√©nagement longue distance {ville} - France enti√®re, camion, autoroute'
  },
  { 
    filename: 'cover-garde-meuble.jpg', 
    query: 'storage unit warehouse boxes furniture',
    description: 'Garde-Meuble - Stockage, entrep√¥t',
    altTextTemplate: 'Garde-meuble {ville} - Stockage, entrep√¥t, self-stockage, location box'
  },
  { 
    filename: 'cover-international.jpg', 
    query: 'international moving world map passport',
    description: 'International - Carte du monde, voyage',
    altTextTemplate: 'D√©m√©nagement international {ville} - √âtranger, expatriation, formalit√©s douanes'
  },
  { 
    filename: 'cover-piano.jpg', 
    query: 'piano moving musical instrument transport',
    description: 'D√©m√©nagement Piano - Instrument, transport d√©licat',
    altTextTemplate: 'D√©m√©nagement piano {ville} - Transport piano, instrument, d√©m√©nageurs sp√©cialis√©s'
  }
];

// Images g√©n√©riques par ville (covers sp√©cifiques)
const VILLE_COVERS = [
  { 
    filename: 'cover-guide.jpg', 
    query: 'moving guide tips advice relocation',
    description: 'Guide d√©m√©nagement - Conseils et astuces',
    altTextTemplate: 'Guide d√©m√©nagement {ville} 2025 - Conseils, astuces, d√©marches, check-list'
  },
  { 
    filename: 'cover-quartiers.jpg', 
    query: 'neighborhoods city districts architecture',
    description: 'Quartiers - Architecture urbaine',
    altTextTemplate: 'Quartiers {ville} d√©m√©nagement - Zones, acc√®s camion, parkings, contraintes'
  },
  { 
    filename: 'cover-estimation.jpg', 
    query: 'moving estimation volume calculator measuring',
    description: 'Estimation volume - Calcul, mesure',
    altTextTemplate: 'Estimation volume d√©m√©nagement {ville} - Calcul m3, devis, inventaire, prix'
  }
];

// Liste des villes
const VILLES = ['bordeaux', 'lille', 'lyon', 'marseille', 'montpellier', 'nantes', 'nice', 'rennes', 'rouen', 'strasbourg', 'toulouse'];

// Statistiques
const stats = {
  total: 0,
  success: 0,
  failed: 0,
  skipped: 0
};

/**
 * Recherche une photo sur Unsplash
 */
async function searchUnsplashPhoto(query, orientation = 'landscape') {
  const url = `https://api.unsplash.com/search/photos?query=${encodeURIComponent(query)}&orientation=${orientation}&per_page=1&content_filter=high`;
  
  return new Promise((resolve, reject) => {
    const options = {
      headers: {
        'Authorization': `Client-ID ${UNSPLASH_ACCESS_KEY}`,
        'Accept-Version': 'v1'
      }
    };

    https.get(url, options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const json = JSON.parse(data);
          
          if (json.results && json.results.length > 0) {
            const photo = json.results[0];
            resolve({
              url: `${photo.urls.raw}&w=1600&h=900&fit=crop&q=80`,
              downloadUrl: photo.links.download_location,
              author: photo.user.name,
              authorUrl: photo.user.links.html,
              photoUrl: photo.links.html
            });
          } else {
            resolve(null);
          }
        } catch (err) {
          reject(err);
        }
      });
    }).on('error', reject);
  });
}

/**
 * T√©l√©charge une image
 */
async function downloadImage(url, outputPath) {
  return new Promise((resolve, reject) => {
    const file = createWriteStream(outputPath);
    
    https.get(url, (response) => {
      if (response.statusCode !== 200) {
        reject(new Error(`HTTP ${response.statusCode}`));
        return;
      }
      
      response.pipe(file);
      
      file.on('finish', () => {
        file.close();
        resolve();
      });
      
      file.on('error', (err) => {
        fs.unlink(outputPath, () => {});
        reject(err);
      });
    }).on('error', (err) => {
      fs.unlink(outputPath, () => {});
      reject(err);
    });
  });
}

/**
 * Notifie Unsplash du t√©l√©chargement (requis par les ToS)
 */
async function triggerDownload(downloadUrl) {
  return new Promise((resolve, reject) => {
    const options = {
      headers: {
        'Authorization': `Client-ID ${UNSPLASH_ACCESS_KEY}`
      }
    };

    https.get(downloadUrl, options, (res) => {
      res.on('data', () => {}); // Consume response
      res.on('end', resolve);
    }).on('error', reject);
  });
}

/**
 * D√©lai pour respecter rate limits
 */
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * Traite une image de blog
 */
async function processBlogImage(ville, image) {
  stats.total++;
  
  const outputDir = path.join(BASE_DIR, 'sites', ville, 'public', 'images', 'blog');
  const outputPath = path.join(outputDir, image.filename);
  
  // V√©rifier si l'image existe d√©j√†
  if (fs.existsSync(outputPath)) {
    console.log(`‚è≠Ô∏è  [${ville}/${image.filename}] D√©j√† pr√©sente, skip`);
    stats.skipped++;
    return;
  }
  
  console.log(`üîç [${ville}/${image.filename}] Recherche: "${image.query}"...`);
  
  try {
    // Rechercher la photo
    const photo = await searchUnsplashPhoto(image.query);
    
    if (!photo) {
      console.log(`‚ùå [${ville}/${image.filename}] Aucun r√©sultat trouv√©`);
      stats.failed++;
      return;
    }
    
    if (DRY_RUN) {
      console.log(`üîó [DRY RUN] ${photo.url}`);
      console.log(`   By ${photo.author} (${photo.authorUrl})`);
      stats.success++;
      return;
    }
    
    // Cr√©er le dossier si n√©cessaire
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }
    
    // T√©l√©charger l'image
    console.log(`‚¨áÔ∏è  T√©l√©chargement...`);
    await downloadImage(photo.url, outputPath);
    
    // Notifier Unsplash (requis)
    await triggerDownload(photo.downloadUrl);
    
    console.log(`‚úÖ [${ville}/${image.filename}] T√©l√©charg√© avec succ√®s`);
    console.log(`   üì∏ By ${photo.author} - ${photo.photoUrl}`);
    
    stats.success++;
    
    // G√©n√©rer l'alt-text SEO local
    const altText = image.altTextTemplate.replace('{ville}', ville.charAt(0).toUpperCase() + ville.slice(1));
    
    // Enregistrer les attributions et m√©tadonn√©es SEO
    const attributionPath = path.join(outputDir, 'ATTRIBUTIONS.txt');
    const attribution = `${image.filename}\n  Photo by ${photo.author} (${photo.authorUrl})\n  ${photo.photoUrl}\n  via Unsplash\n  Description: ${image.description}\n  Alt-text SEO: ${altText}\n\n`;
    fs.appendFileSync(attributionPath, attribution);
    
    // Cr√©er un fichier de m√©tadonn√©es SEO pour chaque image
    const metadataPath = path.join(outputDir, `${image.filename.replace('.jpg', '')}-metadata.json`);
    const metadata = {
      filename: image.filename,
      ville: ville,
      altText: altText,
      description: image.description,
      author: photo.author,
      authorUrl: photo.authorUrl,
      photoUrl: photo.photoUrl,
      keywords: [
        `d√©m√©nagement ${ville}`,
        `d√©m√©nageur ${ville}`,
        ville,
        'd√©m√©nagement',
        'd√©m√©nageur',
        'devis d√©m√©nagement',
        'prix d√©m√©nagement'
      ],
      seoOptimized: true,
      localSeo: true
    };
    fs.writeFileSync(metadataPath, JSON.stringify(metadata, null, 2));
    
  } catch (err) {
    console.error(`‚ùå [${ville}/${image.filename}] Erreur: ${err.message}`);
    stats.failed++;
  }
  
  // D√©lai pour respecter rate limits (50 req/h = 1 req toutes les 72s, on prend 2s pour √™tre safe)
  await delay(2000);
}

/**
 * Main
 */
async function main() {
  console.log('üìù T√©l√©chargement automatique des images de blog Moverz\n');
  
  // V√©rifier la cl√© API
  if (!UNSPLASH_ACCESS_KEY) {
    console.error('‚ùå ERREUR: Variable UNSPLASH_ACCESS_KEY manquante\n');
    console.log('üìã Pour obtenir votre cl√© API Unsplash (gratuit):');
    console.log('   1. Cr√©ez un compte sur https://unsplash.com/developers');
    console.log('   2. Cr√©ez une nouvelle application (Demo tier = 50 req/h)');
    console.log('   3. Copiez votre "Access Key"\n');
    console.log('üí° Ensuite lancez:');
    console.log('   UNSPLASH_ACCESS_KEY=votre_cl√© node scripts/download-blog-images.cjs\n');
    process.exit(1);
  }
  
  if (DRY_RUN) {
    console.log('üîç MODE DRY RUN activ√© (aucun t√©l√©chargement r√©el)\n');
  }
  
  const totalImages = VILLES.length * (BLOG_PILIERS.length + VILLE_COVERS.length);
  console.log(`üìä Total: ${totalImages} images √† traiter\n`);
  console.log(`   - ${VILLES.length} villes √ó ${BLOG_PILIERS.length} piliers = ${VILLES.length * BLOG_PILIERS.length} images pilier`);
  console.log(`   - ${VILLES.length} villes √ó ${VILLE_COVERS.length} covers = ${VILLES.length * VILLE_COVERS.length} images cover\n`);
  
  // Traiter chaque ville
  for (const ville of VILLES) {
    console.log(`\n${'='.repeat(60)}`);
    console.log(`üèôÔ∏è  ${ville.toUpperCase()}`);
    console.log('='.repeat(60));
    
    // Images des piliers (10 par ville)
    console.log('\nüìö Piliers de blog:');
    for (const pilier of BLOG_PILIERS) {
      await processBlogImage(ville, pilier);
    }
    
    // Images de couverture sp√©cifiques (3 par ville)
    console.log('\nüé® Covers sp√©cifiques:');
    for (const cover of VILLE_COVERS) {
      await processBlogImage(ville, cover);
    }
  }
  
  // R√©sum√© final
  console.log('\n' + '='.repeat(60));
  console.log('üìä R√âSUM√â FINAL');
  console.log('='.repeat(60));
  console.log(`Total trait√©:     ${stats.total}`);
  console.log(`‚úÖ Succ√®s:        ${stats.success}`);
  console.log(`‚ùå √âchecs:        ${stats.failed}`);
  console.log(`‚è≠Ô∏è  D√©j√† pr√©sentes: ${stats.skipped}`);
  console.log('');
  
  if (stats.success > 0 && !DRY_RUN) {
    console.log('üìù Les attributions ont √©t√© enregistr√©es dans chaque dossier:');
    console.log('   sites/[ville]/public/images/blog/ATTRIBUTIONS.txt\n');
  }
  
  if (stats.failed > 0) {
    console.log('‚ö†Ô∏è  Certaines images n\'ont pas pu √™tre t√©l√©charg√©es.');
    console.log('   Vous pouvez relancer le script, il skippe les images existantes.\n');
  }
}

// Lancer le script
main().catch(err => {
  console.error('üí• Erreur fatale:', err);
  process.exit(1);
});
